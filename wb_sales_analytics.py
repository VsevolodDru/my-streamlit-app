import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import json
from datetime import datetime, timedelta
import pytz
import numpy as np
import io
from openpyxl import Workbook
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    layout="wide",
    page_title="WB Analytics Pro",
    page_icon="üìà",
    initial_sidebar_state="expanded"
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–∞ –ø–æ —Å—Å—ã–ª–∫–µ
@st.cache_data(ttl=3600)
def load_data(url):
    try:
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()
        df = pd.DataFrame(data)
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        df['date'] = pd.to_datetime(df['date']).dt.tz_localize('Europe/Moscow')
        df['lastChangeDate'] = pd.to_datetime(df['lastChangeDate']).dt.tz_localize('Europe/Moscow')
        df['is_return'] = df.get('srid', '').str.startswith('R')
        df['revenue'] = df['totalPrice']
        df['week'] = df['date'].dt.isocalendar().week
        df['month'] = df['date'].dt.month
        df['isCancel'] = df.get('isCancel', False)
        # –†—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        df = df.rename(columns={
            'date': '–î–∞—Ç–∞',
            'warehouseName': '–°–∫–ª–∞–¥',
            'warehouseType': '–¢–∏–ø —Å–∫–ª–∞–¥–∞',
            'regionName': '–†–µ–≥–∏–æ–Ω',
            'category': '–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
            'brand': '–ë—Ä–µ–Ω–¥',
            'subject': '–ü–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è',
            'totalPrice': '–¶–µ–Ω–∞',
            'revenue': '–í—ã—Ä—É—á–∫–∞',
            'spp': '–°–ü–ü',
            'supplierArticle': '–ê—Ä—Ç–∏–∫—É–ª'
        })
        # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –±—Ä–µ–Ω–¥–æ–≤
        df['–ë—Ä–µ–Ω–¥'] = df['–ë—Ä–µ–Ω–¥'].str.lower()
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ä—Ç–∏–∫—É–ª–æ–≤
        df['–ê—Ä—Ç–∏–∫—É–ª'] = df['–ê—Ä—Ç–∏–∫—É–ª'].astype(str)
        df['–ê—Ä—Ç–∏–∫—É–ª'] = df['–ê—Ä—Ç–∏–∫—É–ª'].apply(lambda x: x[:len(x)//2] if len(x) == 20 and x[:10] == x[10:] else x)
        return df
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        return pd.DataFrame()

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel —Ñ–∞–π–ª–∞
@st.cache_data(ttl=3600)
def load_excel_data(url):
    try:
        response = requests.get(url)
        response.raise_for_status()
        excel_file = io.BytesIO(response.content)
        df = pd.read_excel(excel_file)
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
        required_columns = ['–ê—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–¥–∞–≤—Ü–∞', '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ']
        if not all(col in df.columns for col in required_columns):
            st.error(f"–í Excel —Ñ–∞–π–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å—Ç–æ–ª–±—Ü—ã: {required_columns}")
            return pd.DataFrame()
        # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤
        df = df.rename(columns={'–ê—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–¥–∞–≤—Ü–∞': '–ê—Ä—Ç–∏–∫—É–ª', '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ': '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞'})
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª–∞ –≤ —Å—Ç—Ä–æ–∫–æ–≤—ã–π —Ç–∏–ø
        df['–ê—Ä—Ç–∏–∫—É–ª'] = df['–ê—Ä—Ç–∏–∫—É–ª'].astype(str)
        return df[['–ê—Ä—Ç–∏–∫—É–ª', '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞']]
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ Excel —Ñ–∞–π–ª–∞: {str(e)}")
        return pd.DataFrame()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Excel-—Ñ–∞–π–ª–∞ –∏–∑ DataFrame
def to_excel(df):
    try:
        df_copy = df.copy()
        datetime_cols = ['–î–∞—Ç–∞', 'lastChangeDate']
        for col in datetime_cols:
            if col in df_copy.columns:
                df_copy[col] = df_copy[col].dt.tz_localize(None)
        output = io.BytesIO()
        with pd.ExcelWriter(output, engine='openpyxl') as writer:
            df_copy.to_excel(writer, index=False, sheet_name='SalesData')
        return output.getvalue()
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel —Ñ–∞–π–ª–∞: {str(e)}")
        return None

# –û—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
def main():
    st.title("üîç Wildberries Analytics Pro")
    
    # URL –¥–∞–Ω–Ω—ã—Ö
    json_url = "https://storage.yandexcloud.net/my-json-bucket-chat-wb/wb_dashboard/all_sales_data.json"
    excel_url = "https://storage.yandexcloud.net/my-json-bucket-chat-wb/14_04_2025_07_26_%D0%9E%D0%B1%D1%89%D0%B8%D0%B5_%D1%85%D0%B0%D1%80%D0%B0%D0%BA%D1%82%D0%B5%D1%80%D0%B8%D1%81%D1%82%D0%B8%D0%BA%D0%B8_%D0%BE%D0%B4%D0%BD%D0%B8%D0%BC_%D1%84%D0%B0%D0%B9%D0%BB%D0%BE%D0%BC.xlsx"
    
    with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö..."):
        df = load_data(json_url)
        excel_df = load_excel_data(excel_url)
    
    if df.empty:
        st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    
    if excel_df.empty:
        st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ Excel. –ê–Ω–∞–ª–∏–∑ –±—É–¥–µ—Ç –ø—Ä–æ–¥–æ–ª–∂–µ–Ω –±–µ–∑ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤.")
        excel_df = pd.DataFrame(columns=['–ê—Ä—Ç–∏–∫—É–ª', '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞'])
    
    # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    try:
        df = pd.merge(df, excel_df, on='–ê—Ä—Ç–∏–∫—É–ª', how='left')
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        return
    
    # –°–±—Ä–æ—Å –∫—ç—à–∞
    if st.button("–°–±—Ä–æ—Å–∏—Ç—å –∫—ç—à"):
        st.cache_data.clear()
        st.experimental_rerun()
    
    # –°–∞–π–¥–±–∞—Ä —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
    with st.sidebar:
        st.header("‚è± –ü–µ—Ä–∏–æ–¥ –∞–Ω–∞–ª–∏–∑–∞")
        try:
            default_start = datetime(2025, 4, 9).date()
            default_end = datetime(2025, 4, 10).date()
            date_range = st.date_input(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—ã",
                [default_start, default_end],
                format="DD.MM.YYYY"
            )
            if len(date_range) != 2:
                st.error("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç")
                st.stop()
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –¥–∞—Ç—ã: {str(e)}")
            st.stop()
        
        include_cancelled = st.checkbox("–£—á–∏—Ç—ã–≤–∞—Ç—å –æ—Ç–º–µ–Ω—ã", value=False)
        
        st.header("üóÇ –§–∏–ª—å—Ç—Ä—ã")
        try:
            warehouse_options = df['–°–∫–ª–∞–¥'].unique().tolist()
            default_warehouse = warehouse_options[0] if len(warehouse_options) > 0 else None
            warehouse_type = st.multiselect(
                "–¢–∏–ø —Å–∫–ª–∞–¥–∞",
                options=warehouse_options,
                default=default_warehouse
            )
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å–∫–ª–∞–¥–∞: {str(e)}")
            warehouse_type = []
    
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    try:
        filtered_df = df[
            (df['–î–∞—Ç–∞'].dt.date >= date_range[0]) &
            (df['–î–∞—Ç–∞'].dt.date <= date_range[1]) &
            (~df['is_return'])
        ]
        
        if not include_cancelled:
            filtered_df = filtered_df[~filtered_df['isCancel']]
            
        if warehouse_type:
            filtered_df = filtered_df[filtered_df['–°–∫–ª–∞–¥'].isin(warehouse_type)]
            
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {str(e)}")
        st.stop()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
    if filtered_df.empty:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º")
        st.stop()
    
    # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    st.subheader("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
    col1, col2, col3 = st.columns(3)
    with col1:
        st.metric("–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π", len(filtered_df))
    with col2:
        st.metric("–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤", filtered_df['srid'].nunique())
    with col3:
        st.metric("–í–æ–∑–≤—Ä–∞—Ç–æ–≤", filtered_df['is_return'].sum())
    
    # –ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    st.header("üìä –ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏")
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        revenue = filtered_df['–í—ã—Ä—É—á–∫–∞'].sum()
        st.metric("–í—ã—Ä—É—á–∫–∞", f"{revenue:,.0f} ‚ÇΩ")
    with col2:
        order_count = filtered_df['srid'].nunique()
        avg_check = revenue / order_count if order_count > 0 else 0
        st.metric("–°—Ä–µ–¥–Ω–∏–π —á–µ–∫", f"{avg_check:,.0f} ‚ÇΩ")
    with col3:
        st.metric("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤", order_count)
    with col4:
        avg_spp = filtered_df['–°–ü–ü'].mean()
        if not pd.isna(avg_spp):
            st.metric("–°—Ä–µ–¥–Ω–∏–π –°–ü–ü", f"{np.ceil(avg_spp * 100) / 100:.2f}%")
        else:
            st.metric("–°—Ä–µ–¥–Ω–∏–π –°–ü–ü", "N/A")
    
    # –í–∫–ª–∞–¥–∫–∏ —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π
    tab1, tab2, tab3 = st.tabs(["üìà –î–∏–Ω–∞–º–∏–∫–∞", "üì¶ –¢–æ–≤–∞—Ä—ã", "üí∞ –í—ã—Ä—É—á–∫–∞"])
    
    with tab1:
        st.subheader("–î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ–¥–∞–∂")
        try:
            freq = st.radio("–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞", ["–î–µ–Ω—å", "–ù–µ–¥–µ–ª—è", "–ú–µ—Å—è—Ü"], horizontal=True)
            freq_map = {"–î–µ–Ω—å": "D", "–ù–µ–¥–µ–ª—è": "W", "–ú–µ—Å—è—Ü": "ME"}
            dynamic_df = filtered_df.groupby(pd.Grouper(key='–î–∞—Ç–∞', freq=freq_map[freq])).agg({
                '–í—ã—Ä—É—á–∫–∞': 'sum',
                'srid': 'nunique'
            }).reset_index()
            
            fig = go.Figure()
            fig.add_trace(go.Scatter(
                x=dynamic_df['–î–∞—Ç–∞'],
                y=dynamic_df['–í—ã—Ä—É—á–∫–∞'],
                name="–í—ã—Ä—É—á–∫–∞",
                line=dict(color='#1f77b4', width=2)
            ))
            fig.add_trace(go.Scatter(
                x=dynamic_df['–î–∞—Ç–∞'],
                y=dynamic_df['srid'],
                name="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤",
                line=dict(color='#ff7f0e', width=2),
                yaxis="y2"
            ))
            
            fig.update_layout(
                title=f"–î–∏–Ω–∞–º–∏–∫–∞ –ø—Ä–æ–¥–∞–∂ –ø–æ {freq.lower()}–º",
                yaxis=dict(title="–í—ã—Ä—É—á–∫–∞ (‚ÇΩ)"),
                yaxis2=dict(title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤", overlaying="y", side="right"),
                hovermode="x unified",
                legend=dict(orientation="h", y=1.1)
            )
            st.plotly_chart(fig, use_container_width=True)
            
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –¥–∏–Ω–∞–º–∏–∫–∏: {str(e)}")
    
    with tab2:
        st.subheader("–¢–æ–≤–∞—Ä–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞")
        try:
            # –¢–æ–ø –±—Ä–µ–Ω–¥–æ–≤
            top_brands = filtered_df.groupby('–ë—Ä–µ–Ω–¥').agg({
                '–í—ã—Ä—É—á–∫–∞': 'sum',
                'srid': 'nunique'
            }).nlargest(10, '–í—ã—Ä—É—á–∫–∞').reset_index()
            
            fig = px.bar(top_brands, x='–ë—Ä–µ–Ω–¥', y='–í—ã—Ä—É—á–∫–∞',
                        hover_data=['srid'],
                        labels={'srid': '–ó–∞–∫–∞–∑–æ–≤', '–í—ã—Ä—É—á–∫–∞': '–í—ã—Ä—É—á–∫–∞ (‚ÇΩ)'},
                        title='–¢–æ–ø-10 –±—Ä–µ–Ω–¥–æ–≤ –ø–æ –≤—ã—Ä—É—á–∫–µ')
            st.plotly_chart(fig, use_container_width=True)
            
            # –¢–æ–ø —Ç–æ–≤–∞—Ä–æ–≤
            st.subheader("–¢–æ–ø —Ç–æ–≤–∞—Ä–æ–≤")
            top_items = filtered_df.groupby(['–ë—Ä–µ–Ω–¥', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è', '–ê—Ä—Ç–∏–∫—É–ª', '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞']).agg({
                '–í—ã—Ä—É—á–∫–∞': 'sum',
                'srid': 'nunique',
                '–¶–µ–Ω–∞': 'mean'
            }).nlargest(20, '–í—ã—Ä—É—á–∫–∞').reset_index()
            
            st.dataframe(
                top_items.rename(columns={
                    'srid': '–ó–∞–∫–∞–∑–æ–≤',
                    '–¶–µ–Ω–∞': '–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞'
                }),
                height=600
            )
            
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ç–æ–≤–∞—Ä–æ–≤: {str(e)}")
    
    with tab3:
        st.subheader("–ê–Ω–∞–ª–∏–∑ –≤—ã—Ä—É—á–∫–∏")
        try:
            # –í—ã—Ä—É—á–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            category_revenue = filtered_df.groupby('–ö–∞—Ç–µ–≥–æ—Ä–∏—è').agg({
                '–í—ã—Ä—É—á–∫–∞': 'sum',
                'srid': 'nunique'
            }).reset_index()
            category_revenue['–î–æ–ª—è'] = (category_revenue['–í—ã—Ä—É—á–∫–∞'] / revenue) * 100
            
            fig = px.pie(category_revenue, values='–í—ã—Ä—É—á–∫–∞', names='–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
                        title='–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤—ã—Ä—É—á–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º',
                        hover_data=['–î–æ–ª—è'])
            fig.update_traces(textposition='inside', textinfo='percent+label')
            st.plotly_chart(fig, use_container_width=True)
            
            # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —á–∞—Å–∞–º (–µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –æ–¥–∏–Ω –¥–µ–Ω—å)
            if date_range[0] == date_range[1]:
                st.subheader("–í—ã—Ä—É—á–∫–∞ –ø–æ —á–∞—Å–∞–º")
                hourly_data = filtered_df.groupby(filtered_df['–î–∞—Ç–∞'].dt.hour).agg({
                    '–í—ã—Ä—É—á–∫–∞': 'sum',
                    'srid': 'nunique'
                }).reset_index().rename(columns={'–î–∞—Ç–∞': '–ß–∞—Å'})
                
                if not hourly_data.empty:
                    fig = px.bar(hourly_data, x='–ß–∞—Å', y='–í—ã—Ä—É—á–∫–∞',
                                hover_data=['srid'],
                                labels={'srid': '–ó–∞–∫–∞–∑–æ–≤'},
                                title='–í—ã—Ä—É—á–∫–∞ –ø–æ —á–∞—Å–∞–º')
                    st.plotly_chart(fig, use_container_width=True)
                else:
                    st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—á–∞—Å–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
                    
        except Exception as e:
            st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –≤—ã—Ä—É—á–∫–∏: {str(e)}")
    
    # –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
    with st.expander("üìÅ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"):
        st.subheader("–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
        st.dataframe(filtered_df.head(1000))
        
        col1, col2 = st.columns(2)
        with col1:
            st.download_button(
                label="–°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ (Excel)",
                data=to_excel(filtered_df),
                file_name="wb_analytics.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )
        with col2:
            st.download_button(
                label="–°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ (CSV)",
                data=filtered_df.to_csv(index=False).encode('utf-8'),
                file_name="wb_analytics.csv",
                mime="text/csv"
            )

if __name__ == "__main__":
    main()
